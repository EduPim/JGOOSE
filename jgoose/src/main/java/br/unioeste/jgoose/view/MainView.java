package br.unioeste.jgoose.view;

import br.unioeste.jgoose.controller.BPMNController;
import br.unioeste.jgoose.controller.Controller;
import br.unioeste.jgoose.controller.EditorWindowListener;
import br.unioeste.jgoose.controller.ImportBPMNGraph;
import br.unioeste.jgoose.controller.ImportIStarGraph;
import br.unioeste.jgoose.controller.HorizontalBPMNTraceController;
import br.unioeste.jgoose.controller.HorizontalIStarTraceController;
import br.unioeste.jgoose.controller.HorizontalUseCaseTraceController;
import br.unioeste.jgoose.controller.VerticalTraceController;
import br.unioeste.jgoose.e4j.swing.BasicBPMNEditor;
import br.unioeste.jgoose.e4j.swing.BasicIStarEditor;
import br.unioeste.jgoose.e4j.swing.BasicUseCasesEditor;
import br.unioeste.jgoose.e4j.swing.EditorJFrame;
import br.unioeste.jgoose.e4j.swing.menubar.EditorMenuBar;
import br.unioeste.jgoose.model.BPMNLink;
import br.unioeste.jgoose.model.IStarElement;
import br.unioeste.jgoose.model.IStarLink;
import com.mxgraph.util.mxResources;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import org.apache.log4j.Logger;

/**
 *
 * @author Diego Peliser
 */
public class MainView extends javax.swing.JFrame {

    private UseCasesView useCasesView = null;
    private UseCasesViewBPMN useCasesViewBPMN = null;
    private static final Logger LOG = Logger.getLogger("console");
    private EditorJFrame E4JiStar = null;
    private EditorJFrame E4JUseCases = null;
    private EditorJFrame E4JBPMN = null;
    private JFrame E4JTraceability = null;
    private BasicBPMNEditor editor;
    
    private Image iconJGOOSE = Toolkit.getDefaultToolkit().getImage("./src/main/resources/icons/jgoose.gif");
    
    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();                        
        setLocationRelativeTo(null);
        setIconImage(iconJGOOSE);
        //Set the theme of swing equals to SO.
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            LOG.error("LookAndFeel Error!", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form BasicIStarEditor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsMenu = new javax.swing.JTabbedPane();
        elementosMapeados = new javax.swing.JScrollPane();
        tableElements = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        linksMapeados = new javax.swing.JScrollPane();
        tableLinks = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        informacoesArquivo = new javax.swing.JScrollPane();
        tableFile = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        atoresMapeados = new javax.swing.JScrollPane();
        tableActors = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        buttonOpenE4JiStar = new javax.swing.JButton();
        buttonBPMNToUseCases = new javax.swing.JButton();
        buttonOpenTelosFile = new javax.swing.JButton();
        buttonOpenE4JUseCases = new javax.swing.JButton();
        buttonOpenE4JBPMN = new javax.swing.JButton();
        buttunMappingUseCases = new javax.swing.JButton();
        tabsMenu2 = new javax.swing.JTabbedPane();
        elementosMapeados2 = new javax.swing.JScrollPane();
        tableElementsBPMN = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        linksMapeados2 = new javax.swing.JScrollPane();
        tableLinksBPMN = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        informacoesArquivo2 = new javax.swing.JScrollPane();
        tableBPMNInfo = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        atoresMapeados2 = new javax.swing.JScrollPane();
        tableSwimlanes = new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        btnTraceability = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fileOpenTelosFile = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        toolsOpenE4JBPMNEditor = new javax.swing.JMenuItem();
        toolsOpenE4JEditor = new javax.swing.JMenuItem();
        toolsOpenE4JUCEditor = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        helpGuidelines = new javax.swing.JMenuItem();
        helpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JGOOSE");
        setResizable(false);

        tabsMenu.setToolTipText("");

        tableElements.setAutoCreateRowSorter(true);
        tableElements.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cod", "Name", "Element Type"
            }
        ));
        elementosMapeados.setViewportView(tableElements);
        if (tableElements.getColumnModel().getColumnCount() > 0) {
            tableElements.getColumnModel().getColumn(0).setMaxWidth(35);
            tableElements.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        tabsMenu.addTab("Elements i* Mapped", elementosMapeados);

        tableLinks.setAutoCreateRowSorter(true);
        tableLinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cod", "From", "To", "Link Type"
            }
        ));
        linksMapeados.setViewportView(tableLinks);
        if (tableLinks.getColumnModel().getColumnCount() > 0) {
            tableLinks.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        tabsMenu.addTab("Links i* Mapped", linksMapeados);

        tableFile.setAutoCreateRowSorter(true);
        tableFile.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Description"
            }
        ));
        informacoesArquivo.setViewportView(tableFile);

        tabsMenu.addTab("i* File Information", informacoesArquivo);

        tableActors.setAutoCreateRowSorter(true);
        tableActors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cod", "Name", "Childrens"
            }
        ));
        atoresMapeados.setViewportView(tableActors);
        if (tableActors.getColumnModel().getColumnCount() > 0) {
            tableActors.getColumnModel().getColumn(0).setMaxWidth(35);
            tableActors.getColumnModel().getColumn(1).setMaxWidth(100);
            tableActors.getColumnModel().getColumn(3).setMaxWidth(70);
        }

        tabsMenu.addTab("Actors i* Mapped", atoresMapeados);

        buttonOpenE4JiStar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buttonOpenE4JiStar.setText("E4J i*");
        buttonOpenE4JiStar.setToolTipText("Abrir Arquivo Telos");
        buttonOpenE4JiStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenE4JiStarActionPerformed(evt);
            }
        });

        buttonBPMNToUseCases.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buttonBPMNToUseCases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/toUC_32x32.png"))); // NOI18N
        buttonBPMNToUseCases.setText("Mapping BPMN to Use Cases");
        buttonBPMNToUseCases.setToolTipText("Derivar Casos de Uso a partir de BPMN");
        buttonBPMNToUseCases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBPMNToUseCasesActionPerformed(evt);
            }
        });

        buttonOpenTelosFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buttonOpenTelosFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder_open_32x32.png"))); // NOI18N
        buttonOpenTelosFile.setText("Open Telos File");
        buttonOpenTelosFile.setToolTipText("Abrir Arquivo Telos");
        buttonOpenTelosFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenTelosFileActionPerformed(evt);
            }
        });

        buttonOpenE4JUseCases.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buttonOpenE4JUseCases.setText("E4J Use Cases");
        buttonOpenE4JUseCases.setToolTipText("Abrir Arquivo Telos");
        buttonOpenE4JUseCases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenE4JUseCasesActionPerformed(evt);
            }
        });

        buttonOpenE4JBPMN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buttonOpenE4JBPMN.setText("E4J BPMN");
        buttonOpenE4JBPMN.setToolTipText("Abrir Editor BPMN");
        buttonOpenE4JBPMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenE4JBPMNActionPerformed(evt);
            }
        });

        buttunMappingUseCases.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buttunMappingUseCases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/usecases_32x32.png"))); // NOI18N
        buttunMappingUseCases.setText("Mapping Use Cases UML");
        buttunMappingUseCases.setToolTipText("Mapear Casos de Uso UML");
        buttunMappingUseCases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttunMappingUseCasesActionPerformed(evt);
            }
        });

        tabsMenu2.setToolTipText("");

        tableElementsBPMN.setAutoCreateRowSorter(true);
        tableElementsBPMN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cod", "Name", "Element Type"
            }
        ));
        elementosMapeados2.setViewportView(tableElementsBPMN);
        if (tableElementsBPMN.getColumnModel().getColumnCount() > 0) {
            tableElementsBPMN.getColumnModel().getColumn(0).setMaxWidth(35);
            tableElementsBPMN.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        tabsMenu2.addTab("Elements", elementosMapeados2);

        tableLinksBPMN.setAutoCreateRowSorter(true);
        tableLinksBPMN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cod", "From", "To", "Link Type"
            }
        ));
        linksMapeados2.setViewportView(tableLinksBPMN);
        if (tableLinksBPMN.getColumnModel().getColumnCount() > 0) {
            tableLinksBPMN.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        tabsMenu2.addTab("Links", linksMapeados2);

        tableBPMNInfo.setAutoCreateRowSorter(true);
        tableBPMNInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Description"
            }
        ));
        informacoesArquivo2.setViewportView(tableBPMNInfo);

        tabsMenu2.addTab("BPMN Information", informacoesArquivo2);

        tableSwimlanes.setAutoCreateRowSorter(true);
        tableSwimlanes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cod", "Name", "Childrens"
            }
        ));
        atoresMapeados2.setViewportView(tableSwimlanes);
        if (tableSwimlanes.getColumnModel().getColumnCount() > 0) {
            tableSwimlanes.getColumnModel().getColumn(0).setMaxWidth(35);
            tableSwimlanes.getColumnModel().getColumn(1).setMaxWidth(100);
            tableSwimlanes.getColumnModel().getColumn(3).setMaxWidth(70);
        }

        tabsMenu2.addTab("Swimlanes", atoresMapeados2);

        btnTraceability.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTraceability.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/traceability_32x32.png"))); // NOI18N
        btnTraceability.setText("Traceability");
        btnTraceability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraceabilityActionPerformed(evt);
            }
        });

        menuFile.setText("File");

        fileOpenTelosFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        fileOpenTelosFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder_open_16x16.png"))); // NOI18N
        fileOpenTelosFile.setText("Open Telos File");
        fileOpenTelosFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenTelosFileActionPerformed(evt);
            }
        });
        menuFile.add(fileOpenTelosFile);

        menuBar.add(menuFile);

        menuTools.setText("Tools");

        toolsOpenE4JBPMNEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        toolsOpenE4JBPMNEditor.setText("E4J BPMN");
        toolsOpenE4JBPMNEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsOpenE4JBPMNEditorActionPerformed(evt);
            }
        });
        menuTools.add(toolsOpenE4JBPMNEditor);

        toolsOpenE4JEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        toolsOpenE4JEditor.setText("E4J i*");
        toolsOpenE4JEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsOpenE4JEditorActionPerformed(evt);
            }
        });
        menuTools.add(toolsOpenE4JEditor);

        toolsOpenE4JUCEditor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        toolsOpenE4JUCEditor.setText("E4J Use Cases");
        toolsOpenE4JUCEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsOpenE4JUCEditorActionPerformed(evt);
            }
        });
        menuTools.add(toolsOpenE4JUCEditor);

        menuBar.add(menuTools);

        menuHelp.setText("Help");

        helpGuidelines.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpGuidelines.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/guidelines_16x16.png"))); // NOI18N
        helpGuidelines.setText("Guidelines");
        helpGuidelines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpGuidelinesActionPerformed(evt);
            }
        });
        menuHelp.add(helpGuidelines);

        helpAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        helpAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/info_16x16.png"))); // NOI18N
        helpAbout.setText("About");
        helpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpAboutActionPerformed(evt);
            }
        });
        menuHelp.add(helpAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonOpenE4JBPMN, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonBPMNToUseCases))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonOpenE4JUseCases, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonOpenE4JiStar, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonOpenTelosFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttunMappingUseCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(20, 20, 20)
                .addComponent(btnTraceability, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(tabsMenu2, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
            .addComponent(tabsMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonBPMNToUseCases, buttonOpenE4JUseCases, buttonOpenE4JiStar, buttonOpenTelosFile});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBPMNToUseCases)
                    .addComponent(buttonOpenE4JBPMN, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOpenE4JiStar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttunMappingUseCases))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOpenE4JUseCases, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOpenTelosFile)
                    .addComponent(btnTraceability, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(tabsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabsMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonBPMNToUseCases, buttonOpenE4JUseCases});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonOpenE4JiStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenE4JiStarActionPerformed
        try {
            this.showE4JiStar();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonOpenE4JiStarActionPerformed

    private void helpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpAboutActionPerformed
        this.showAboutDialog();
    }//GEN-LAST:event_helpAboutActionPerformed

    private void fileOpenTelosFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenTelosFileActionPerformed
        Controller.openTelosFile();
    }//GEN-LAST:event_fileOpenTelosFileActionPerformed

    private void helpGuidelinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpGuidelinesActionPerformed
        this.showGuidelinesDialog();
    }//GEN-LAST:event_helpGuidelinesActionPerformed

    private void buttonBPMNToUseCasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBPMNToUseCasesActionPerformed
        BPMNController.mapUseCases();
        if (useCasesViewBPMN == null) {
            useCasesViewBPMN = new UseCasesViewBPMN();
            useCasesViewBPMN.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        }
        useCasesViewBPMN.updateTable();
        useCasesViewBPMN.setVisible(true);        
    }//GEN-LAST:event_buttonBPMNToUseCasesActionPerformed

    private void toolsOpenE4JEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsOpenE4JEditorActionPerformed
        try {
            this.showE4JiStar();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_toolsOpenE4JEditorActionPerformed

    private void buttonOpenTelosFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenTelosFileActionPerformed
        Controller.setMainView(this);
        Controller.openTelosFile();
    }//GEN-LAST:event_buttonOpenTelosFileActionPerformed

    private void buttonOpenE4JUseCasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenE4JUseCasesActionPerformed
        try {
            this.showE4JUseCases();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonOpenE4JUseCasesActionPerformed

    private void toolsOpenE4JUCEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsOpenE4JUCEditorActionPerformed
        try {
            this.showE4JUseCases();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_toolsOpenE4JUCEditorActionPerformed

    private void toolsOpenE4JBPMNEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsOpenE4JBPMNEditorActionPerformed
        try {
            this.showE4JBPMN();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_toolsOpenE4JBPMNEditorActionPerformed

    private void buttonOpenE4JBPMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenE4JBPMNActionPerformed
        try {
            this.showE4JBPMN();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonOpenE4JBPMNActionPerformed

    private void buttunMappingUseCasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttunMappingUseCasesActionPerformed
        Controller.mapUseCases();
        if (useCasesView == null) {
            useCasesView = new UseCasesView();
            useCasesView.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        }
        useCasesView.updateTabel();
        useCasesView.setVisible(true);
    }//GEN-LAST:event_buttunMappingUseCasesActionPerformed

    private void btnTraceabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraceabilityActionPerformed
        try {
            this.showTraceability();
        } catch (HeadlessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTraceabilityActionPerformed

    /**
     * Abre uma janela GuidelinesDialogView
     */
    private void showGuidelinesDialog() {
        GuidelinesDialogView diretrizes;
        try {
            diretrizes = new GuidelinesDialogView(this);
            diretrizes.setModal(true);
            int x = this.getX() + (this.getWidth() - diretrizes.getWidth()) / 2;
            int y = this.getY() + (this.getHeight() - diretrizes.getHeight()) / 2;
            diretrizes.setLocation(x, y);
            diretrizes.setVisible(true);
        } catch (BadLocationException ex) {
            LOG.error(ex);
        }
    }

    /**
     * Abre uma janela AboutDialogView
     */
    private void showAboutDialog() {
        AboutDialogView about;
        about = new AboutDialogView(this);
        about.setModal(true);
        int x = this.getX() + (this.getWidth() - about.getWidth()) / 2;
        int y = this.getY() + (this.getHeight() - about.getHeight()) / 2;
        about.setLocation(x, y);
        about.setVisible(true);
    }

    /**
     * Atualiza as Tabelas relacionadas à BPMN
     */
    public void updateTableBPMN(){
        /*
         * Atualiza Informações Arquivo
         */
        DefaultTableModel bpmnInfo = new DefaultTableModel();
        String vetArquivo[] = new String[2];
        bpmnInfo.addColumn("Description");
        bpmnInfo.addColumn("Description");

        vetArquivo[0] = "Number of swimlanes";
        vetArquivo[1] = String.valueOf(BPMNController.getTokensBPMN().getParticipants().size());
        bpmnInfo.addRow(vetArquivo);                
        
        vetArquivo[0] = "Number of elements";
        vetArquivo[1] = String.valueOf(
                            BPMNController.getTokensBPMN().getActivities().size() +
                            BPMNController.getTokensBPMN().getEvents().size() +
                            BPMNController.getTokensBPMN().getGateways().size() +
                            BPMNController.getTokensBPMN().getArtifacts().size()
                        );
        bpmnInfo.addRow(vetArquivo);
        
        vetArquivo[0] = "Number of links";
        vetArquivo[1] = String.valueOf(BPMNController.getTokensBPMN().getLinks().size());
        bpmnInfo.addRow(vetArquivo);
        
        tableBPMNInfo.setModel(bpmnInfo);
        
        // Seta swimlanes mapeadas        
        DefaultTableModel tabSwimlanes = new DefaultTableModel();
        String vetAtores[] = new String[4];
        tabSwimlanes.addColumn("ID");
        tabSwimlanes.addColumn("Cod");
        tabSwimlanes.addColumn("Name");
        tabSwimlanes.addColumn("Childrens");
        
        for (int i = 0; i < BPMNController.getTokensBPMN().getParticipants().size(); i++) {
            vetAtores[0] = String.valueOf(i + 1);
            vetAtores[1] = BPMNController.getTokensBPMN().getParticipants().get(i).getCode();
            vetAtores[2] = BPMNController.getTokensBPMN().getParticipants().get(i).getLabel();
            
            if (BPMNController.getTokensBPMN().getParticipants().get(i).getChildren().size() > 0) {
                vetAtores[3] = "YES";
            } else {
                vetAtores[3] = "NO";
            }
            tabSwimlanes.addRow(vetAtores);
        }
        
        tableSwimlanes.setModel(tabSwimlanes);
        
        // Seta larguda das colunas
        tableSwimlanes.getColumnModel().getColumn(0).setPreferredWidth(10);
        tableSwimlanes.getColumnModel().getColumn(1).setPreferredWidth(50);
        tableSwimlanes.getColumnModel().getColumn(2).setPreferredWidth(500);
        tableSwimlanes.getColumnModel().getColumn(3).setPreferredWidth(50);
        
        // Seta elementos mapeados
        DefaultTableModel tabElementos = new DefaultTableModel();
        String vetElementos[] = new String[4];
        tabElementos.addColumn("ID");
        tabElementos.addColumn("Cod");
        tabElementos.addColumn("Name");
        tabElementos.addColumn("Type");
        
        int cont = 1; // count id        
        
        vetElementos[3] = "Event";        
        for (int i = 0; i < BPMNController.getTokensBPMN().getEvents().size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = BPMNController.getTokensBPMN().getEvents().get(i).getCode();
            vetElementos[2] = BPMNController.getTokensBPMN().getEvents().get(i).getLabel();            
            tabElementos.addRow(vetElementos);
        }
        
        vetElementos[3] = "Activity";        
        for (int i = 0; i < BPMNController.getTokensBPMN().getActivities().size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = BPMNController.getTokensBPMN().getActivities().get(i).getCode();
            vetElementos[2] = BPMNController.getTokensBPMN().getActivities().get(i).getLabel();            
            tabElementos.addRow(vetElementos);
        }
        
        vetElementos[3] = "Gateway";        
        for (int i = 0; i < BPMNController.getTokensBPMN().getGateways().size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = BPMNController.getTokensBPMN().getGateways().get(i).getCode();
            vetElementos[2] = BPMNController.getTokensBPMN().getGateways().get(i).getLabel();            
            tabElementos.addRow(vetElementos);
        }
        
        vetElementos[3] = "Artifact";        
        for (int i = 0; i < BPMNController.getTokensBPMN().getArtifacts().size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = BPMNController.getTokensBPMN().getArtifacts().get(i).getCode();
            vetElementos[2] = BPMNController.getTokensBPMN().getArtifacts().get(i).getLabel();            
            tabElementos.addRow(vetElementos);
        }
        
        tableElementsBPMN.setModel(tabElementos);
        
        // seta largura das colunas
        tableElementsBPMN.getColumnModel().getColumn(0).setPreferredWidth(10);
        tableElementsBPMN.getColumnModel().getColumn(1).setPreferredWidth(80);
        tableElementsBPMN.getColumnModel().getColumn(2).setPreferredWidth(500);
        tableElementsBPMN.getColumnModel().getColumn(3).setPreferredWidth(80);
        
        // Seta links
        DefaultTableModel tabLinks = new DefaultTableModel();
        String vetLinks[] = new String[5];
        tabLinks.addColumn("ID");
        tabLinks.addColumn("Cod");
        tabLinks.addColumn("From");
        tabLinks.addColumn("To");
        tabLinks.addColumn("Link Type");
        
        cont = 1; // id count

        for (int i = 0; i < BPMNController.getTokensBPMN().getLinks().size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = BPMNController.getTokensBPMN().getLinks().get(i).getCode();
            vetLinks[2] = BPMNController.getTokensBPMN().getLinks().get(i).getFrom().getCode() + " - " + BPMNController.getTokensBPMN().getLinks().get(i).getFrom().getLabel();
            vetLinks[3] = BPMNController.getTokensBPMN().getLinks().get(i).getTo().getCode() + " - " + BPMNController.getTokensBPMN().getLinks().get(i).getTo().getLabel();
            
            int linkType = BPMNController.getTokensBPMN().getLinks().get(i).getType();
            
            if (linkType == BPMNLink.SEQUENCE)
                vetLinks[4] = "Sequence";
            else if (linkType == BPMNLink.ASSOCIATION)
                vetLinks[4] = "Association";
            else if (linkType == BPMNLink.DATA_ASSOCIATION)
                vetLinks[4] = "Data association";
            else if (linkType == BPMNLink.MESSAGE)
                vetLinks[4] = "Message";
            
            tabLinks.addRow(vetLinks);
        }

        tableLinksBPMN.setModel(tabLinks);
        
        // seta largura das colunas
        tableLinksBPMN.getColumnModel().getColumn(0).setPreferredWidth(10);
        tableLinksBPMN.getColumnModel().getColumn(1).setPreferredWidth(60);
        tableLinksBPMN.getColumnModel().getColumn(2).setPreferredWidth(300);
        tableLinksBPMN.getColumnModel().getColumn(3).setPreferredWidth(300);
        tableLinksBPMN.getColumnModel().getColumn(4).setPreferredWidth(60);
        
    }
    
    /**
     * Atualiza as Tabelas: Informações do Arquivo, Atores i* Mapeados,
     * Elementos i* Mapeados e Links i* Mapeados
     */
    public void updateTableIStar(){
        /*
         * Atualiza Informações Arquivo
         */
        DefaultTableModel tabArquivo = new DefaultTableModel();
        String vetArquivo[] = new String[2];
        tabArquivo.addColumn("Description");
        tabArquivo.addColumn("Description");
        vetArquivo[0] = "File Name";
        vetArquivo[1] = Controller.getOme().getDirIn();
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "System Actor";
        int posAtor = Controller.getOme().searchActorCod(Controller.getSystemActor());
        vetArquivo[1] = Controller.getOme().getActor(posAtor).getName();
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "System Actor Cod";
        vetArquivo[1] = Controller.getSystemActor();
        tabArquivo.addRow(vetArquivo);
        int nlinks_mapeados = Controller.getOme().getDependenciess().size() + Controller.getOme().getDecompositions().size() + Controller.getOme().getMeansEnds().size() + Controller.getOme().getIsas().size();
        nlinks_mapeados += Controller.getOme().getInss().size() + Controller.getOme().getContributions().size() + Controller.getOme().getIsPartOfs().size() + Controller.getOme().getOccupiess().size() + Controller.getOme().getPlayss().size() + Controller.getOme().getCoverss().size();
        int nelementos_mapeados = Controller.getOme().getTasks().size() + Controller.getOme().getGoals().size() + Controller.getOme().getSoftgoals().size() + Controller.getOme().getResourcess().size();
        int natores_mapeados = Controller.getOme().getActors().size() + Controller.getOme().getAgents().size() + Controller.getOme().getRoles().size() + Controller.getOme().getPositions().size();
        vetArquivo[0] = "Number of Actors";
        vetArquivo[1] = String.valueOf(natores_mapeados);
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Number of Elements";
        vetArquivo[1] = String.valueOf(nelementos_mapeados);
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "Number of Links";
        vetArquivo[1] = String.valueOf(nlinks_mapeados);
        tabArquivo.addRow(vetArquivo);
        vetArquivo[0] = "SD/SR Diagram";
        if (Controller.getOme().checkSDSR(Controller.getSystemActor())) {
            vetArquivo[1] = "Strategic Rationale Model (SR)";
        } else {
            vetArquivo[1] = "Strategic Dependency Model (SD)";
        }
        tabArquivo.addRow(vetArquivo);
        tableFile.setModel(tabArquivo);
        /*
         * Atualiza Atores i* Mapeados
         */
        DefaultTableModel tabAtores = new DefaultTableModel();
        String vetAtores[] = new String[4];
        tabAtores.addColumn("ID");
        tabAtores.addColumn("Cod");
        tabAtores.addColumn("Name");
        tabAtores.addColumn("Childrens");
        for (int i = 0; i < Controller.getOme().getActors().size(); i++) {
            vetAtores[0] = String.valueOf(i + 1);
            vetAtores[1] = Controller.getOme().getActor(i).getCod();
            vetAtores[2] = Controller.getOme().getActor(i).getName();
            if (Controller.getOme().getActor(i).getChildrens().size() > 0) {
                vetAtores[3] = "YES";
            } else {
                vetAtores[3] = "NO";
            }
            tabAtores.addRow(vetAtores);
        }
        int atores = Controller.getOme().getActors().size();
        for (int i = 0; i < Controller.getOme().getAgents().size(); i++) {
            vetAtores[0] = String.valueOf(i + atores);
            vetAtores[1] = Controller.getOme().getAgent(i).getCod();
            vetAtores[2] = Controller.getOme().getAgent(i).getName();
            if (Controller.getOme().getAgent(i).getChildrens().size() > 0) {
                vetAtores[3] = "YES";
            } else {
                vetAtores[3] = "NO";
            }
            tabAtores.addRow(vetAtores);
        }
        atores += Controller.getOme().getAgents().size();
        for (int i = 0; i < Controller.getOme().getRoles().size(); i++) {
            vetAtores[0] = String.valueOf(i + atores);
            vetAtores[1] = Controller.getOme().getRole(i).getCod();
            vetAtores[2] = Controller.getOme().getRole(i).getName();
            if (Controller.getOme().getRole(i).getChildrens().size() > 0) {
                vetAtores[3] = "YES";
            } else {
                vetAtores[3] = "NO";
            }
            tabAtores.addRow(vetAtores);
        }
        atores += Controller.getOme().getRoles().size();
        for (int i = 0; i < Controller.getOme().getPositions().size(); i++) {
            vetAtores[0] = String.valueOf(i + atores);
            vetAtores[1] = Controller.getOme().getPosition(i).getCod();
            vetAtores[2] = Controller.getOme().getPosition(i).getName();
            if (Controller.getOme().getPosition(i).getChildrens().size() > 0) {
                vetAtores[3] = "YES";
            } else {
                vetAtores[3] = "NO";
            }
            tabAtores.addRow(vetAtores);
        }
        tableActors.setModel(tabAtores);
        // Seta larguda das colunas
        tableActors.getColumnModel().getColumn(0).setPreferredWidth(10);
        tableActors.getColumnModel().getColumn(1).setPreferredWidth(50);
        tableActors.getColumnModel().getColumn(2).setPreferredWidth(500);
        tableActors.getColumnModel().getColumn(3).setPreferredWidth(50);
        /*
         * Atualiza Elementos i* Mapeados
         */
        DefaultTableModel tabElementos = new DefaultTableModel();
        String vetElementos[] = new String[4];
        tabElementos.addColumn("ID");
        tabElementos.addColumn("Cod");
        tabElementos.addColumn("Name");
        tabElementos.addColumn("Element Type");
        int cont = 1;
        ArrayList<IStarElement> goals = Controller.getOme().getGoals();
        vetElementos[3] = "Goal";
        for (int i = 0; i < goals.size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = goals.get(i).getCod();
            vetElementos[2] = goals.get(i).getName();
            tabElementos.addRow(vetElementos);
        }
        ArrayList<IStarElement> tasks = Controller.getOme().getTasks();
        vetElementos[3] = "Task";
        for (int i = 0; i < tasks.size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = tasks.get(i).getCod();
            vetElementos[2] = tasks.get(i).getName();
            tabElementos.addRow(vetElementos);
        }
        ArrayList<IStarElement> resources = Controller.getOme().getResourcess();
        vetElementos[3] = "Resource";
        for (int i = 0; i < resources.size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = resources.get(i).getCod();
            vetElementos[2] = resources.get(i).getName();
            tabElementos.addRow(vetElementos);
        }
        ArrayList<IStarElement> softgoals = Controller.getOme().getSoftgoals();
        vetElementos[3] = "Softgoal";
        for (int i = 0; i < softgoals.size(); i++) {
            vetElementos[0] = String.valueOf(cont++);
            vetElementos[1] = softgoals.get(i).getCod();
            vetElementos[2] = softgoals.get(i).getName();
            tabElementos.addRow(vetElementos);
        }
        tableElements.setModel(tabElementos);
        // seta largura das colunas
        tableElements.getColumnModel().getColumn(0).setPreferredWidth(10);
        tableElements.getColumnModel().getColumn(1).setPreferredWidth(80);
        tableElements.getColumnModel().getColumn(2).setPreferredWidth(500);
        tableElements.getColumnModel().getColumn(3).setPreferredWidth(80);
        /*
         * Atualiza Links i* Mapeados
         */
        DefaultTableModel tabLinks = new DefaultTableModel();
        String vetLinks[] = new String[5];
        tabLinks.addColumn("ID");
        tabLinks.addColumn("Cod");
        tabLinks.addColumn("From");
        tabLinks.addColumn("To");
        tabLinks.addColumn("Link Type");
        cont = 1;
        ArrayList<IStarLink> isas = Controller.getOme().getIsas();
        vetLinks[4] = "ISA";
        for (int i = 0; i < isas.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = isas.get(i).getCod();
            vetLinks[2] = isas.get(i).getFrom();
            vetLinks[3] = isas.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> inss = Controller.getOme().getInss();
        vetLinks[4] = "INS";
        for (int i = 0; i < inss.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = inss.get(i).getCod();
            vetLinks[2] = inss.get(i).getFrom();
            vetLinks[3] = inss.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> ispartofs = Controller.getOme().getIsPartOfs();
        vetLinks[4] = "Is-Part-Of";
        for (int i = 0; i < ispartofs.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = ispartofs.get(i).getCod();
            vetLinks[2] = ispartofs.get(i).getFrom();
            vetLinks[3] = ispartofs.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> occupiess = Controller.getOme().getOccupiess();
        vetLinks[4] = "Occupies";
        for (int i = 0; i < occupiess.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = occupiess.get(i).getCod();
            vetLinks[2] = occupiess.get(i).getFrom();
            vetLinks[3] = occupiess.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> playss = Controller.getOme().getPlayss();
        vetLinks[4] = "Plays";
        for (int i = 0; i < playss.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = playss.get(i).getCod();
            vetLinks[2] = playss.get(i).getFrom();
            vetLinks[3] = playss.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> coverss = Controller.getOme().getCoverss();
        vetLinks[4] = "Covers";
        for (int i = 0; i < coverss.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = coverss.get(i).getCod();
            vetLinks[2] = coverss.get(i).getFrom();
            vetLinks[3] = coverss.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> contributions = Controller.getOme().getContributions();
        vetLinks[4] = "Contribution";
        for (int i = 0; i < contributions.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = contributions.get(i).getCod();
            vetLinks[2] = contributions.get(i).getFrom();
            vetLinks[3] = contributions.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> dependencias = Controller.getOme().getDependenciess();
        vetLinks[4] = "Dependencie";
        for (int i = 0; i < dependencias.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = dependencias.get(i).getCod();
            vetLinks[2] = dependencias.get(i).getFrom();
            vetLinks[3] = dependencias.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> decompositions = Controller.getOme().getDecompositions();
        vetLinks[4] = "Task-Decomposition";
        for (int i = 0; i < decompositions.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = decompositions.get(i).getCod();
            vetLinks[2] = decompositions.get(i).getFrom();
            vetLinks[3] = decompositions.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        ArrayList<IStarLink> meansEnds = Controller.getOme().getMeansEnds();
        vetLinks[4] = "Means-End";
        for (int i = 0; i < meansEnds.size(); i++) {
            vetLinks[0] = String.valueOf(cont++);
            vetLinks[1] = meansEnds.get(i).getCod();
            vetLinks[2] = meansEnds.get(i).getFrom();
            vetLinks[3] = meansEnds.get(i).getTo();
            tabLinks.addRow(vetLinks);
        }
        tableLinks.setModel(tabLinks);
        // seta largura das colunas
        tableLinks.getColumnModel().getColumn(0).setPreferredWidth(10);
        tableLinks.getColumnModel().getColumn(1).setPreferredWidth(100);
        tableLinks.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableLinks.getColumnModel().getColumn(3).setPreferredWidth(100);
        tableLinks.getColumnModel().getColumn(4).setPreferredWidth(100);
    }
    
    /**
     * Abre o Editor E4J i*
     */
    private void showE4JiStar() throws HeadlessException, IOException {      
         if (E4JiStar == null) {
            E4JiStar = new EditorJFrame(0);
            E4JiStar.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            E4JiStar.setIconImage(iconJGOOSE);
            E4JiStar.setExtendedState(MAXIMIZED_BOTH);
            EditorWindowListener windowListener = new EditorWindowListener(this, E4JiStar);
            this.addWindowListener(windowListener);
            E4JiStar.addWindowListener(windowListener);
            this.addWindowListener(windowListener);
            BasicIStarEditor editor = (BasicIStarEditor) E4JiStar.getEditor();
            JMenuBar menubar = E4JiStar.getJMenuBar();
            // get diagram menu ba
            JMenu fileMenu = ((EditorMenuBar) menubar).getFileMenu();
            // alias label = l
            String label = mxResources.get("useCaseMaker", null, "Generate Use Cases");
            JMenuItem menuItem = new JMenuItem(editor.bind(label, new ImportIStarGraph(E4JiStar)));
            fileMenu.add(menuItem, 3);
            fileMenu.add(new JPopupMenu.Separator(), 4);
            String label1 = mxResources.get("traceabilityMaker", null, "Horizontal Traceability");
            JMenuItem menuItem1 = new JMenuItem(editor.bind(label1, new HorizontalIStarTraceController(E4JiStar)));
            fileMenu.add(menuItem1, 3);
            fileMenu.add(new JPopupMenu.Separator(), 4);
            String label2 = mxResources.get("traceabilityMaker", null, "Vertical Traceability");
            JMenuItem menuItem2 = new JMenuItem(editor.bind(label2, new VerticalTraceController(2)));
            fileMenu.add(menuItem2, 3);
            fileMenu.add(new JPopupMenu.Separator(), 4);
            
            /*String label2 = mxResources.get("traceabilityMaker", null, "Vertical Traceability");
            JMenuItem menuItem2 = new JMenuItem(editor.bind(label2, new HorizontalIStarTraceController(E4JiStar)));
            fileMenu.add(menuItem2, 3);
            fileMenu.add(new JPopupMenu.Separator(), 4);*/
            

            //diagramMenu.addSeparator();
            //label = mxResources.get("iStarMLMaker", null, "Gerar iarML");
            // menu.add(editor.bind(label, new GenerateIStarMLAction()));
            //menubar.add(diagramMenu);
        }
        Controller.setMainView(this);
        E4JiStar.setVisible(true);
        this.setVisible(false);
    }

    /**
     * Abre o Editor E4J Use Cases
     */
    private void showE4JUseCases() throws HeadlessException, IOException {
        if (E4JUseCases == null) {
            E4JUseCases = new EditorJFrame(1);
            E4JUseCases.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            E4JUseCases.setIconImage(iconJGOOSE);
            E4JUseCases.setExtendedState(MAXIMIZED_BOTH);
            EditorWindowListener windowListener = new EditorWindowListener(this, E4JUseCases);
            this.addWindowListener(windowListener);
            E4JUseCases.addWindowListener(windowListener);
            this.addWindowListener(windowListener);
            BasicUseCasesEditor editor = (BasicUseCasesEditor) E4JUseCases.getEditor();
            JMenuBar menubar = E4JUseCases.getJMenuBar();
            JMenu fileMenu = ((EditorMenuBar) menubar).getFileMenu();
            String label1 = mxResources.get("traceabilityMaker", null, "Horizontal Traceability");
            JMenuItem menuItem1 = new JMenuItem(editor.bind(label1, new HorizontalUseCaseTraceController(E4JUseCases)));
            fileMenu.add(menuItem1, 3);
        }
        Controller.setMainView(this);
        E4JUseCases.setVisible(true);
        this.setVisible(false);
    }

    /**
     * Abre o Editor E4J BPMN
     */
    private void showE4JBPMN() throws HeadlessException, IOException {
        try{
            
            if (E4JBPMN == null) {            
                E4JBPMN = new EditorJFrame(2);
                E4JBPMN.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                EditorWindowListener windowListener = new EditorWindowListener(this, E4JBPMN);
                E4JBPMN.setIconImage(iconJGOOSE);
                E4JBPMN.setExtendedState(MAXIMIZED_BOTH);
                this.addWindowListener(windowListener);
                E4JBPMN.addWindowListener(windowListener);
                this.addWindowListener(windowListener);
                editor = (BasicBPMNEditor) E4JBPMN.getEditor();

                // get diagram menu bar and shows option to derive Use Cases
                JMenuBar menubar = E4JBPMN.getJMenuBar();
                JMenu fileMenu = ((EditorMenuBar) menubar).getFileMenu();
                String label1 = mxResources.get("traceabilityMaker", null, "Horizontal Traceability");
                JMenuItem menuItem1 = new JMenuItem(editor.bind(label1, new HorizontalBPMNTraceController(E4JBPMN)));
                fileMenu.add(menuItem1, 3);
                fileMenu.add(new JPopupMenu.Separator(), 4);
                String label2 = mxResources.get("traceabilityMaker", null, "Vertical Traceability");
                JMenuItem menuItem2 = new JMenuItem(editor.bind(label2, new VerticalTraceController(1)));
                fileMenu.add(menuItem2, 3);
                fileMenu.add(new JPopupMenu.Separator(), 4);
                String label = mxResources.get("useCaseMaker", null, "Generate Use Cases");
                JMenuItem menuItem = new JMenuItem(editor.bind(label, new ImportBPMNGraph(E4JBPMN)));
                fileMenu.add(menuItem, 3);
                fileMenu.add(new JPopupMenu.Separator(), 4);

            }               
            BPMNController.setMainView(this);
            E4JBPMN.setVisible(true);
            this.setVisible(false);
        } catch(Exception e){
            StringBuilder sb = new StringBuilder(e.toString());
            for (StackTraceElement ste : e.getStackTrace()) {
                sb.append("\n\tat ");
                sb.append(ste);
            }
            String trace = sb.toString();
            JOptionPane.showMessageDialog(null, trace);
        }
    }
    
    /**
     * Abre a janela de Rastreabilidade
     */
    private void showTraceability() {
        try{
            if (E4JTraceability == null) {            
                E4JTraceability = new EditorJFrame(3);
                E4JTraceability.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                EditorWindowListener windowListener = new EditorWindowListener(this, E4JTraceability);
                E4JTraceability.setIconImage(iconJGOOSE);
                E4JTraceability.setExtendedState(MAXIMIZED_BOTH);
                /*
                this.addWindowListener(windowListener);
                E4JBPMN.addWindowListener(windowListener);
                this.addWindowListener(windowListener);
                editor = (BasicBPMNEditor) E4JBPMN.getEditor();

                // get diagram menu bar and shows option to derive Use Cases
                JMenuBar menubar = E4JBPMN.getJMenuBar();
                JMenu fileMenu = ((EditorMenuBar) menubar).getFileMenu();
                String label = mxResources.get("useCaseMaker", null, "Generate Use Cases");
                JMenuItem menuItem = new JMenuItem(editor.bind(label, new ImportBPMNGraph(E4JBPMN)));
                fileMenu.add(menuItem, 3);
                fileMenu.add(new JPopupMenu.Separator(), 4);*/
            } 
          //  HorizontalBPMNTraceController.setMainView(this);
            E4JTraceability.setVisible(true);
            this.setVisible(false);
           // TraceabilityView obj = new TraceabilityView();
           // obj.setVisible(true);   
        }catch(Exception e){
            
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane atoresMapeados;
    private javax.swing.JScrollPane atoresMapeados2;
    private javax.swing.JButton btnTraceability;
    private javax.swing.JButton buttonBPMNToUseCases;
    private javax.swing.JButton buttonOpenE4JBPMN;
    private javax.swing.JButton buttonOpenE4JUseCases;
    private javax.swing.JButton buttonOpenE4JiStar;
    private javax.swing.JButton buttonOpenTelosFile;
    private javax.swing.JButton buttunMappingUseCases;
    private javax.swing.JScrollPane elementosMapeados;
    private javax.swing.JScrollPane elementosMapeados2;
    private javax.swing.JMenuItem fileOpenTelosFile;
    private javax.swing.JMenuItem helpAbout;
    private javax.swing.JMenuItem helpGuidelines;
    private javax.swing.JScrollPane informacoesArquivo;
    private javax.swing.JScrollPane informacoesArquivo2;
    private javax.swing.JScrollPane linksMapeados;
    private javax.swing.JScrollPane linksMapeados2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuTools;
    private javax.swing.JTable tableActors;
    private javax.swing.JTable tableBPMNInfo;
    private javax.swing.JTable tableElements;
    private javax.swing.JTable tableElementsBPMN;
    private javax.swing.JTable tableFile;
    private javax.swing.JTable tableLinks;
    private javax.swing.JTable tableLinksBPMN;
    private javax.swing.JTable tableSwimlanes;
    private javax.swing.JTabbedPane tabsMenu;
    private javax.swing.JTabbedPane tabsMenu2;
    private javax.swing.JMenuItem toolsOpenE4JBPMNEditor;
    private javax.swing.JMenuItem toolsOpenE4JEditor;
    private javax.swing.JMenuItem toolsOpenE4JUCEditor;
    // End of variables declaration//GEN-END:variables



}
